{"version":3,"file":"index.esm.js","sources":["../src/index.js"],"sourcesContent":["/**\n * edge-utils main entry point\n * @module edge-utils\n */\nconst { createEdgeHandler } = require('./core/handler');\nconst { detectPlatform, isCloudflareWorker, isVercelEdge } = require('./core/platform');\nconst { MemoryCache } = require('./cache/memory');\nconst { EdgeCache } = require('./cache/edge');\nconst { cacheWarming, cacheInvalidation } = require('./cache/strategies');\nconst { geoRoute, getCountry } = require('./geo/routing');\nconst { getRegion } = require('./geo/detection');\nconst { nearestRegion, nearestRegionByDistance } = require('./geo/nearest');\nconst { minimizeColdStart, keepAlive } = require('./performance/cold-start');\nconst { streamResponse, generateStream, createReadableStream } = require('./performance/streaming');\nconst { compressGzip, compressBrotli } = require('./performance/compression');\nconst { EdgeError, handleError, retryWithBackoff, circuitBreaker } = require('./errors');\n\n// Rate Limiting\nconst {\n  TokenBucketLimiter,\n  SlidingWindowLimiter,\n  RateLimitManager\n} = require('./rate-limiting');\n\n// Security\nconst {\n  SecurityHeadersManager,\n  CSRFProtection,\n  XSSPrevention,\n  RequestValidator,\n  DDoSProtection\n} = require('./security');\n\n// Authentication & Authorization\nconst {\n  JWTManager,\n  APIKeyManager,\n  EdgeSessionManager\n} = require('./auth');\n\n// Monitoring & Observability\nconst {\n  MetricsCollector,\n  StructuredLogger,\n  TracingManager,\n  HealthCheckManager\n} = require('./monitoring');\n\n// Load Balancing\nconst {\n  LoadBalancer,\n  CircuitBreaker,\n  StickySessionManager\n} = require('./load-balancing');\n\n// Content Negotiation\nconst {\n  ContentNegotiator,\n  QualityValue,\n  createContentNegotiationMiddleware\n} = require('./content-negotiation');\n\n// WebSocket\nconst {\n  WebSocketManager,\n  WebSocketUtils,\n  WebSocketState,\n  MessageType,\n  createWebSocketMiddleware\n} = require('./websocket');\n\n// GraphQL\nconst {\n  GraphQLClient,\n  GraphQLError,\n  GraphQLSchema,\n  GraphQLQueryBuilder,\n  createGraphQLMiddleware,\n  OperationType,\n  ErrorSeverity\n} = require('./graphql');\n\nmodule.exports = {\n  createEdgeHandler,\n  detectPlatform,\n  isCloudflareWorker,\n  isVercelEdge,\n  MemoryCache,\n  EdgeCache,\n  cacheWarming,\n  cacheInvalidation,\n  geoRoute,\n  getCountry,\n  getRegion,\n  nearestRegion,\n  nearestRegionByDistance,\n  minimizeColdStart,\n  keepAlive,\n  streamResponse,\n  generateStream,\n  createReadableStream,\n  compressGzip,\n  compressBrotli,\n  EdgeError,\n  handleError,\n  retryWithBackoff,\n  circuitBreaker,\n  // Rate Limiting\n  TokenBucketLimiter,\n  SlidingWindowLimiter,\n  RateLimitManager,\n  // Security\n  SecurityHeadersManager,\n  CSRFProtection,\n  XSSPrevention,\n  RequestValidator,\n  DDoSProtection,\n  // Authentication & Authorization\n  JWTManager,\n  APIKeyManager,\n  EdgeSessionManager,\n  // Monitoring & Observability\n  MetricsCollector,\n  StructuredLogger,\n  TracingManager,\n  HealthCheckManager,\n  // Load Balancing\n  LoadBalancer,\n  CircuitBreaker,\n  StickySessionManager,\n  // Content Negotiation\n  ContentNegotiator,\n  QualityValue,\n  createContentNegotiationMiddleware,\n  // WebSocket\n  WebSocketManager,\n  WebSocketUtils,\n  WebSocketState,\n  MessageType,\n  createWebSocketMiddleware,\n  // GraphQL\n  GraphQLClient,\n  GraphQLError,\n  GraphQLSchema,\n  GraphQLQueryBuilder,\n  createGraphQLMiddleware,\n  OperationType,\n  ErrorSeverity\n};"],"names":["createEdgeHandler","require","detectPlatform","isCloudflareWorker","isVercelEdge","MemoryCache","EdgeCache","cacheWarming","cacheInvalidation","geoRoute","getCountry","getRegion","nearestRegion","nearestRegionByDistance","minimizeColdStart","keepAlive","streamResponse","generateStream","createReadableStream","compressGzip","compressBrotli","EdgeError","handleError","retryWithBackoff","circuitBreaker","TokenBucketLimiter","SlidingWindowLimiter","RateLimitManager","SecurityHeadersManager","CSRFProtection","XSSPrevention","RequestValidator","DDoSProtection","JWTManager","APIKeyManager","EdgeSessionManager","MetricsCollector","StructuredLogger","TracingManager","HealthCheckManager","LoadBalancer","CircuitBreaker","StickySessionManager","ContentNegotiator","QualityValue","createContentNegotiationMiddleware","WebSocketManager","WebSocketUtils","WebSocketState","MessageType","createWebSocketMiddleware","GraphQLClient","GraphQLError","GraphQLSchema","GraphQLQueryBuilder","createGraphQLMiddleware","OperationType","ErrorSeverity","module","exports"],"mappings":"AAIA,MAAMA,kBAAEA,GAAsBC,QAAQ,mBAChCC,eAAEA,EAAcC,mBAAEA,EAAkBC,aAAEA,GAAiBH,QAAQ,oBAC/DI,YAAEA,GAAgBJ,QAAQ,mBAC1BK,UAAEA,GAAcL,QAAQ,iBACxBM,aAAEA,EAAYC,kBAAEA,GAAsBP,QAAQ,uBAC9CQ,SAAEA,EAAQC,WAAEA,GAAeT,QAAQ,kBACnCU,UAAEA,GAAcV,QAAQ,oBACxBW,cAAEA,EAAaC,wBAAEA,GAA4BZ,QAAQ,kBACrDa,kBAAEA,EAAiBC,UAAEA,GAAcd,QAAQ,6BAC3Ce,eAAEA,EAAcC,eAAEA,EAAcC,qBAAEA,GAAyBjB,QAAQ,4BACnEkB,aAAEA,EAAYC,eAAEA,GAAmBnB,QAAQ,8BAC3CoB,UAAEA,EAASC,YAAEA,EAAWC,iBAAEA,EAAgBC,eAAEA,GAAmBvB,QAAQ,aAGvEwB,mBACJA,EAAkBC,qBAClBA,EAAoBC,iBACpBA,GACE1B,QAAQ,oBAGN2B,uBACJA,EAAsBC,eACtBA,EAAcC,cACdA,EAAaC,iBACbA,EAAgBC,eAChBA,GACE/B,QAAQ,eAGNgC,WACJA,EAAUC,cACVA,EAAaC,mBACbA,GACElC,QAAQ,WAGNmC,iBACJA,EAAgBC,iBAChBA,EAAgBC,eAChBA,EAAcC,mBACdA,GACEtC,QAAQ,iBAGNuC,aACJA,EAAYC,eACZA,EAAcC,qBACdA,GACEzC,QAAQ,qBAGN0C,kBACJA,EAAiBC,aACjBA,EAAYC,mCACZA,GACE5C,QAAQ,0BAGN6C,iBACJA,EAAgBC,eAChBA,EAAcC,eACdA,EAAcC,YACdA,EAAWC,0BACXA,GACEjD,QAAQ,gBAGNkD,cACJA,EAAaC,aACbA,EAAYC,cACZA,EAAaC,oBACbA,EAAmBC,wBACnBA,GAAuBC,cACvBA,GAAaC,cACbA,IACExD,QAAQ,aAEZyD,OAAOC,QAAU,CACf3D,oBACAE,iBACAC,qBACAC,eACAC,cACAC,YACAC,eACAC,oBACAC,WACAC,aACAC,YACAC,gBACAC,0BACAC,oBACAC,YACAC,iBACAC,iBACAC,uBACAC,eACAC,iBACAC,YACAC,cACAC,mBACAC,iBAEAC,qBACAC,uBACAC,mBAEAC,yBACAC,iBACAC,gBACAC,mBACAC,iBAEAC,aACAC,gBACAC,qBAEAC,mBACAC,mBACAC,iBACAC,qBAEAC,eACAC,iBACAC,uBAEAC,oBACAC,eACAC,qCAEAC,mBACAC,iBACAC,iBACAC,cACAC,4BAEAC,gBACAC,eACAC,gBACAC,sBACAC,2BACAC,iBACAC"}